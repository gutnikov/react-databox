{
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "plugins": ["jest", "import", "react", "@typescript-eslint", "prettier"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "env": {
    "browser": true
  },
  "settings": {
    "import/extensions": [".js", ".jsx", ".ts", ".tsx"],
    "import/resolver": {
      "node": {
        "paths": ["src"]
      }
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "arrow-body-style": "off",
    "no-use-before-define": "off",
    "no-shadow": "off",
    "space-before-function-paren": ["error", "never"],
    "class-methods-use-this": [0],
    "array-bracket-newline": "error",
    "array-bracket-spacing": "error",
    "array-element-newline": ["error", "consistent"],
    "arrow-spacing": "error",
    "block-spacing": "error",
    "comma-spacing": "error",
    "computed-property-spacing": "error",
    "dot-location": "error",
    "eol-last": "error",
    "func-call-spacing": "error",
    "func-names": "off",
    "generator-star-spacing": "error",
    "key-spacing": "error",
    "keyword-spacing": "error",
    "line-comment-position": "error",
    "linebreak-style": "error",
    "newline-per-chained-call": "error",
    "no-irregular-whitespace": "off",
    "no-mixed-spaces-and-tabs": "error",
    "no-unused-expressions": "off",
    "no-multi-spaces": "error",
    "no-regex-spaces": "error",
    "no-spaced-func": "error",
    "no-trailing-spaces": "error",
    "no-whitespace-before-property": "error",
    "nonblock-statement-body-position": "error",
    "object-curly-newline": [
      "error",
      {
        "consistent": true
      }
    ],
    "object-property-newline": "error",
    "one-var-declaration-per-line": "error",
    "operator-linebreak": [
      "error",
      "after",
      {
        "overrides": {
          "?": "before",
          ":": "before"
        }
      }
    ],
    "padded-blocks": "error",
    "padding-line-between-statements": "error",
    "rest-spread-spacing": "error",
    "semi-spacing": "error",
    "semi-style": "error",
    "space-before-blocks": "error",
    "space-in-parens": "error",
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": "error",
    "switch-colon-spacing": "error",
    "template-tag-spacing": "error",
    "import/newline-after-import": "error",
    "react/jsx-child-element-spacing": "error",
    "react/jsx-closing-bracket-location": "error",
    "react/jsx-closing-tag-location": "error",
    "react/jsx-curly-spacing": "error",
    "react/jsx-equals-spacing": "error",
    "react/jsx-indent": "error",
    "react/jsx-indent-props": "error",
    "react/jsx-max-props-per-line": "error",
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-spreading": "off",
    "react/jsx-no-useless-fragment": "off",
    "react/jsx-tag-spacing": [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "never"
      }
    ],
    "react/jsx-wrap-multilines": [
      2,
      {
        "declaration": "parens",
        "assignment": "parens",
        "return": "parens",
        "arrow": "parens",
        "condition": "parens",
        "logical": "parens",
        "prop": "ignore"
      }
    ],
    // TODO: turn this on after fixing all the other errors
    "react-hooks/exhaustive-deps": "off",

    // airbnb allows ternaries, just error in configuration
    "no-ternary": "off",
    // this rule was renamed, anyway we don't need prop-types at all
    "react/jsx-sort-prop-types": "off",
    // use only named exports (airbnb uses default)
    "import/no-default-export": "error",
    // use only named exports (airbnb uses default)
    "import/no-named-export": "off",
    // use only named exports (airbnb uses default)
    "import/prefer-default-export": "off",
    // no reason to create jsdoc for typescript
    "require-jsdoc": "off",
    // lock JSX to .tsx files
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [".tsx"]
      }
    ],
    "react/require-default-props": "off",
    // airbnb has this rule, but we want to import internal modules
    "import/no-internal-modules": "off",
    // aribnb has missconfiguration, just fix it does not work properly with typescript
    "import/no-unused-modules": [
      "off",
      {
        "missingExports": true,
        "unusedExports": true
      }
    ],
    // aribnb has this rule, but can not place static field outside react class for typo
    "react/static-property-placement": ["error", "static public field"],
    // disable while no "allow" prop https://github.com/benmosher/eslint-plugin-import/issues/1118
    "import/no-relative-parent-imports": "off",
    // do not use inline functions in props, which produce rerenders
    "react/jsx-no-bind": [
      "off",
      {
        "ignoreRefs": false,
        "allowArrowFunctions": true,
        "allowFunctions": false,
        "allowBind": false,
        "ignoreDOMComponents": false
      }
    ],
    // for optional chaining
    "@typescript-eslint/no-unnecessary-type-assertion": "off",
    // add prettier warns to eslint
    "prettier/prettier": "error",
    // deprecated
    "prefer-reflect": "off",
    // allow immer mutations
    "no-param-reassign": [
      "error",
      {
        "ignorePropertyModificationsFor": ["draft"]
      }
    ],
    // decided on meeting to turn off this rule, because we have hoisting
    // rules and we don't care about function declaration scope
    "func-style": "off",
    // decided on meeting to turn off this rule, because we
    // already have max file size and its enough for readability
    "import/group-exports": "off",
    // does not work properly in stage3 class method definitions, like `method = () => {};`
    "no-invalid-this": "off",
    // works wrong with string literals in props, more info here:
    // https://github.com/yannickcr/eslint-plugin-react/pull/2146
    // maybe will turn this rule on in future
    "react/jsx-no-literals": "off",
    // decided on meeting to turn off this rule
    "max-lines-per-function": "off",
    "react/boolean-prop-naming": "off",
    // do need it for typescript
    "valid-jsdoc": "off",
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true
      }
    ],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never"
      }
    ]
  },
  "ignorePatterns": ["generated/"],
  "overrides": [
    {
      "files": ["**/Docs/**/*.*"],
      "rules": {
        "import/extensions": "off",
        "import/no-webpack-loader-syntax": "off",
        "import/no-unresolved": "off"
      }
    },
    {
      "files": ["**/Pages/**/*.*"],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ]
}
