# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  telegram: String
  isAdmin: Boolean
  isApi: Boolean
  isModerator: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  telegram: StringFilter
  isAdmin: BooleanFilter
  isApi: BooleanFilter
  isModerator: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  telegram: OrderDirection
  isAdmin: OrderDirection
  isApi: OrderDirection
  isModerator: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  telegram: String
  isAdmin: Boolean
  isApi: Boolean
  isModerator: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  telegram: String
  isAdmin: Boolean
  isApi: Boolean
  isModerator: Boolean
  createdAt: DateTime
}

type Agent {
  id: ID!
  user: User
  url: String
  name: String
  description: String
}

input AgentWhereUniqueInput {
  id: ID
}

input AgentWhereInput {
  AND: [AgentWhereInput!]
  OR: [AgentWhereInput!]
  NOT: [AgentWhereInput!]
  id: IDFilter
  user: UserWhereInput
  url: StringFilter
  name: StringFilter
  description: StringFilter
}

input AgentOrderByInput {
  id: OrderDirection
  url: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input AgentUpdateInput {
  user: UserRelateToOneForUpdateInput
  url: String
  name: String
  description: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AgentUpdateArgs {
  where: AgentWhereUniqueInput!
  data: AgentUpdateInput!
}

input AgentCreateInput {
  user: UserRelateToOneForCreateInput
  url: String
  name: String
  description: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserToken {
  id: ID!
  user: User
  value: String
  description: String
}

input UserTokenWhereUniqueInput {
  id: ID
  value: String
}

input UserTokenWhereInput {
  AND: [UserTokenWhereInput!]
  OR: [UserTokenWhereInput!]
  NOT: [UserTokenWhereInput!]
  id: IDFilter
  user: UserWhereInput
  value: StringFilter
  description: StringFilter
}

input UserTokenOrderByInput {
  id: OrderDirection
  value: OrderDirection
  description: OrderDirection
}

input UserTokenUpdateInput {
  user: UserRelateToOneForUpdateInput
  value: String
  description: String
}

input UserTokenUpdateArgs {
  where: UserTokenWhereUniqueInput!
  data: UserTokenUpdateInput!
}

input UserTokenCreateInput {
  user: UserRelateToOneForCreateInput
  value: String
  description: String
}

type NodeType {
  id: ID!
  name: String
  title: String
  description: String
  logo: ImageFieldOutput
  tags(where: NodeTypeTagWhereInput! = {}, orderBy: [NodeTypeTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeTypeTagWhereUniqueInput): [NodeTypeTag!]
  tagsCount(where: NodeTypeTagWhereInput! = {}): Int
  resources(where: NodeTypeResourceWhereInput! = {}, orderBy: [NodeTypeResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeTypeResourceWhereUniqueInput): [NodeTypeResource!]
  resourcesCount(where: NodeTypeResourceWhereInput! = {}): Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input NodeTypeWhereUniqueInput {
  id: ID
  name: String
}

input NodeTypeWhereInput {
  AND: [NodeTypeWhereInput!]
  OR: [NodeTypeWhereInput!]
  NOT: [NodeTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  description: StringFilter
  tags: NodeTypeTagManyRelationFilter
  resources: NodeTypeResourceManyRelationFilter
}

input NodeTypeTagManyRelationFilter {
  every: NodeTypeTagWhereInput
  some: NodeTypeTagWhereInput
  none: NodeTypeTagWhereInput
}

input NodeTypeResourceManyRelationFilter {
  every: NodeTypeResourceWhereInput
  some: NodeTypeResourceWhereInput
  none: NodeTypeResourceWhereInput
}

input NodeTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input NodeTypeUpdateInput {
  name: String
  title: String
  description: String
  logo: ImageFieldInput
  tags: NodeTypeTagRelateToManyForUpdateInput
  resources: NodeTypeResourceRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input NodeTypeTagRelateToManyForUpdateInput {
  disconnect: [NodeTypeTagWhereUniqueInput!]
  set: [NodeTypeTagWhereUniqueInput!]
  create: [NodeTypeTagCreateInput!]
  connect: [NodeTypeTagWhereUniqueInput!]
}

input NodeTypeResourceRelateToManyForUpdateInput {
  disconnect: [NodeTypeResourceWhereUniqueInput!]
  set: [NodeTypeResourceWhereUniqueInput!]
  create: [NodeTypeResourceCreateInput!]
  connect: [NodeTypeResourceWhereUniqueInput!]
}

input NodeTypeUpdateArgs {
  where: NodeTypeWhereUniqueInput!
  data: NodeTypeUpdateInput!
}

input NodeTypeCreateInput {
  name: String
  title: String
  description: String
  logo: ImageFieldInput
  tags: NodeTypeTagRelateToManyForCreateInput
  resources: NodeTypeResourceRelateToManyForCreateInput
}

input NodeTypeTagRelateToManyForCreateInput {
  create: [NodeTypeTagCreateInput!]
  connect: [NodeTypeTagWhereUniqueInput!]
}

input NodeTypeResourceRelateToManyForCreateInput {
  create: [NodeTypeResourceCreateInput!]
  connect: [NodeTypeResourceWhereUniqueInput!]
}

type NodeTypeResource {
  id: ID!
  type: NodeTypeResourceTypeType
  url: String
  description: String
}

enum NodeTypeResourceTypeType {
  manual
  twitter
  telegram
  discord
  github
  web
  etc
}

input NodeTypeResourceWhereUniqueInput {
  id: ID
}

input NodeTypeResourceWhereInput {
  AND: [NodeTypeResourceWhereInput!]
  OR: [NodeTypeResourceWhereInput!]
  NOT: [NodeTypeResourceWhereInput!]
  id: IDFilter
  type: NodeTypeResourceTypeTypeNullableFilter
  url: StringFilter
  description: StringFilter
}

input NodeTypeResourceTypeTypeNullableFilter {
  equals: NodeTypeResourceTypeType
  in: [NodeTypeResourceTypeType!]
  notIn: [NodeTypeResourceTypeType!]
  not: NodeTypeResourceTypeTypeNullableFilter
}

input NodeTypeResourceOrderByInput {
  id: OrderDirection
  type: OrderDirection
  url: OrderDirection
  description: OrderDirection
}

input NodeTypeResourceUpdateInput {
  type: NodeTypeResourceTypeType
  url: String
  description: String
}

input NodeTypeResourceUpdateArgs {
  where: NodeTypeResourceWhereUniqueInput!
  data: NodeTypeResourceUpdateInput!
}

input NodeTypeResourceCreateInput {
  type: NodeTypeResourceTypeType
  url: String
  description: String
}

type NodeTypeTag {
  id: ID!
  name: String
}

input NodeTypeTagWhereUniqueInput {
  id: ID
}

input NodeTypeTagWhereInput {
  AND: [NodeTypeTagWhereInput!]
  OR: [NodeTypeTagWhereInput!]
  NOT: [NodeTypeTagWhereInput!]
  id: IDFilter
  name: StringFilter
}

input NodeTypeTagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input NodeTypeTagUpdateInput {
  name: String
}

input NodeTypeTagUpdateArgs {
  where: NodeTypeTagWhereUniqueInput!
  data: NodeTypeTagUpdateInput!
}

input NodeTypeTagCreateInput {
  name: String
}

type Node {
  id: ID!
  nodeType: NodeType
  user: User
  url: String
  name: String
  metricsPort: Int
  description: String
}

input NodeWhereUniqueInput {
  id: ID
}

input NodeWhereInput {
  AND: [NodeWhereInput!]
  OR: [NodeWhereInput!]
  NOT: [NodeWhereInput!]
  id: IDFilter
  nodeType: NodeTypeWhereInput
  user: UserWhereInput
  url: StringFilter
  name: StringFilter
  metricsPort: IntFilter
  description: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input NodeOrderByInput {
  id: OrderDirection
  url: OrderDirection
  name: OrderDirection
  metricsPort: OrderDirection
  description: OrderDirection
}

input NodeUpdateInput {
  nodeType: NodeTypeRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  url: String
  name: String
  metricsPort: Int
  description: String
}

input NodeTypeRelateToOneForUpdateInput {
  create: NodeTypeCreateInput
  connect: NodeTypeWhereUniqueInput
  disconnect: Boolean
}

input NodeUpdateArgs {
  where: NodeWhereUniqueInput!
  data: NodeUpdateInput!
}

input NodeCreateInput {
  nodeType: NodeTypeRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  url: String
  name: String
  metricsPort: Int
  description: String
}

input NodeTypeRelateToOneForCreateInput {
  create: NodeTypeCreateInput
  connect: NodeTypeWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAgent(data: AgentCreateInput!): Agent
  createAgents(data: [AgentCreateInput!]!): [Agent]
  updateAgent(where: AgentWhereUniqueInput!, data: AgentUpdateInput!): Agent
  updateAgents(data: [AgentUpdateArgs!]!): [Agent]
  deleteAgent(where: AgentWhereUniqueInput!): Agent
  deleteAgents(where: [AgentWhereUniqueInput!]!): [Agent]
  createUserToken(data: UserTokenCreateInput!): UserToken
  createUserTokens(data: [UserTokenCreateInput!]!): [UserToken]
  updateUserToken(where: UserTokenWhereUniqueInput!, data: UserTokenUpdateInput!): UserToken
  updateUserTokens(data: [UserTokenUpdateArgs!]!): [UserToken]
  deleteUserToken(where: UserTokenWhereUniqueInput!): UserToken
  deleteUserTokens(where: [UserTokenWhereUniqueInput!]!): [UserToken]
  createNodeType(data: NodeTypeCreateInput!): NodeType
  createNodeTypes(data: [NodeTypeCreateInput!]!): [NodeType]
  updateNodeType(where: NodeTypeWhereUniqueInput!, data: NodeTypeUpdateInput!): NodeType
  updateNodeTypes(data: [NodeTypeUpdateArgs!]!): [NodeType]
  deleteNodeType(where: NodeTypeWhereUniqueInput!): NodeType
  deleteNodeTypes(where: [NodeTypeWhereUniqueInput!]!): [NodeType]
  createNodeTypeResource(data: NodeTypeResourceCreateInput!): NodeTypeResource
  createNodeTypeResources(data: [NodeTypeResourceCreateInput!]!): [NodeTypeResource]
  updateNodeTypeResource(where: NodeTypeResourceWhereUniqueInput!, data: NodeTypeResourceUpdateInput!): NodeTypeResource
  updateNodeTypeResources(data: [NodeTypeResourceUpdateArgs!]!): [NodeTypeResource]
  deleteNodeTypeResource(where: NodeTypeResourceWhereUniqueInput!): NodeTypeResource
  deleteNodeTypeResources(where: [NodeTypeResourceWhereUniqueInput!]!): [NodeTypeResource]
  createNodeTypeTag(data: NodeTypeTagCreateInput!): NodeTypeTag
  createNodeTypeTags(data: [NodeTypeTagCreateInput!]!): [NodeTypeTag]
  updateNodeTypeTag(where: NodeTypeTagWhereUniqueInput!, data: NodeTypeTagUpdateInput!): NodeTypeTag
  updateNodeTypeTags(data: [NodeTypeTagUpdateArgs!]!): [NodeTypeTag]
  deleteNodeTypeTag(where: NodeTypeTagWhereUniqueInput!): NodeTypeTag
  deleteNodeTypeTags(where: [NodeTypeTagWhereUniqueInput!]!): [NodeTypeTag]
  createNode(data: NodeCreateInput!): Node
  createNodes(data: [NodeCreateInput!]!): [Node]
  updateNode(where: NodeWhereUniqueInput!, data: NodeUpdateInput!): Node
  updateNodes(data: [NodeUpdateArgs!]!): [Node]
  deleteNode(where: NodeWhereUniqueInput!): Node
  deleteNodes(where: [NodeWhereUniqueInput!]!): [Node]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  agents(where: AgentWhereInput! = {}, orderBy: [AgentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AgentWhereUniqueInput): [Agent!]
  agent(where: AgentWhereUniqueInput!): Agent
  agentsCount(where: AgentWhereInput! = {}): Int
  userTokens(where: UserTokenWhereInput! = {}, orderBy: [UserTokenOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserTokenWhereUniqueInput): [UserToken!]
  userToken(where: UserTokenWhereUniqueInput!): UserToken
  userTokensCount(where: UserTokenWhereInput! = {}): Int
  nodeTypes(where: NodeTypeWhereInput! = {}, orderBy: [NodeTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeTypeWhereUniqueInput): [NodeType!]
  nodeType(where: NodeTypeWhereUniqueInput!): NodeType
  nodeTypesCount(where: NodeTypeWhereInput! = {}): Int
  nodeTypeResources(where: NodeTypeResourceWhereInput! = {}, orderBy: [NodeTypeResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeTypeResourceWhereUniqueInput): [NodeTypeResource!]
  nodeTypeResource(where: NodeTypeResourceWhereUniqueInput!): NodeTypeResource
  nodeTypeResourcesCount(where: NodeTypeResourceWhereInput! = {}): Int
  nodeTypeTags(where: NodeTypeTagWhereInput! = {}, orderBy: [NodeTypeTagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeTypeTagWhereUniqueInput): [NodeTypeTag!]
  nodeTypeTag(where: NodeTypeTagWhereUniqueInput!): NodeTypeTag
  nodeTypeTagsCount(where: NodeTypeTagWhereInput! = {}): Int
  nodes(where: NodeWhereInput! = {}, orderBy: [NodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NodeWhereUniqueInput): [Node!]
  node(where: NodeWhereUniqueInput!): Node
  nodesCount(where: NodeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
